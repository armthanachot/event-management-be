// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"event-management-system/dto/entity"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newEventParticipant(db *gorm.DB, opts ...gen.DOOption) eventParticipant {
	_eventParticipant := eventParticipant{}

	_eventParticipant.eventParticipantDo.UseDB(db, opts...)
	_eventParticipant.eventParticipantDo.UseModel(&entity.EventParticipant{})

	tableName := _eventParticipant.eventParticipantDo.TableName()
	_eventParticipant.ALL = field.NewAsterisk(tableName)
	_eventParticipant.ID = field.NewUint(tableName, "id")
	_eventParticipant.EventID = field.NewUint(tableName, "event_id")
	_eventParticipant.UserID = field.NewUint(tableName, "user_id")
	_eventParticipant.Event = eventParticipantBelongsToEvent{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Event", "entity.Event"),
		Organizer: struct {
			field.RelationField
			Events struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Event.Organizer", "entity.User"),
			Events: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Event.Organizer.Events", "entity.Event"),
			},
		},
	}

	_eventParticipant.User = eventParticipantBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "entity.User"),
	}

	_eventParticipant.fillFieldMap()

	return _eventParticipant
}

type eventParticipant struct {
	eventParticipantDo

	ALL     field.Asterisk
	ID      field.Uint
	EventID field.Uint
	UserID  field.Uint
	Event   eventParticipantBelongsToEvent

	User eventParticipantBelongsToUser

	fieldMap map[string]field.Expr
}

func (e eventParticipant) Table(newTableName string) *eventParticipant {
	e.eventParticipantDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eventParticipant) As(alias string) *eventParticipant {
	e.eventParticipantDo.DO = *(e.eventParticipantDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eventParticipant) updateTableName(table string) *eventParticipant {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewUint(table, "id")
	e.EventID = field.NewUint(table, "event_id")
	e.UserID = field.NewUint(table, "user_id")

	e.fillFieldMap()

	return e
}

func (e *eventParticipant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eventParticipant) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 5)
	e.fieldMap["id"] = e.ID
	e.fieldMap["event_id"] = e.EventID
	e.fieldMap["user_id"] = e.UserID

}

func (e eventParticipant) clone(db *gorm.DB) eventParticipant {
	e.eventParticipantDo.ReplaceConnPool(db.Statement.ConnPool)
	e.Event.db = db.Session(&gorm.Session{Initialized: true})
	e.Event.db.Statement.ConnPool = db.Statement.ConnPool
	e.User.db = db.Session(&gorm.Session{Initialized: true})
	e.User.db.Statement.ConnPool = db.Statement.ConnPool
	return e
}

func (e eventParticipant) replaceDB(db *gorm.DB) eventParticipant {
	e.eventParticipantDo.ReplaceDB(db)
	e.Event.db = db.Session(&gorm.Session{})
	e.User.db = db.Session(&gorm.Session{})
	return e
}

type eventParticipantBelongsToEvent struct {
	db *gorm.DB

	field.RelationField

	Organizer struct {
		field.RelationField
		Events struct {
			field.RelationField
		}
	}
}

func (a eventParticipantBelongsToEvent) Where(conds ...field.Expr) *eventParticipantBelongsToEvent {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a eventParticipantBelongsToEvent) WithContext(ctx context.Context) *eventParticipantBelongsToEvent {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a eventParticipantBelongsToEvent) Session(session *gorm.Session) *eventParticipantBelongsToEvent {
	a.db = a.db.Session(session)
	return &a
}

func (a eventParticipantBelongsToEvent) Model(m *entity.EventParticipant) *eventParticipantBelongsToEventTx {
	return &eventParticipantBelongsToEventTx{a.db.Model(m).Association(a.Name())}
}

func (a eventParticipantBelongsToEvent) Unscoped() *eventParticipantBelongsToEvent {
	a.db = a.db.Unscoped()
	return &a
}

type eventParticipantBelongsToEventTx struct{ tx *gorm.Association }

func (a eventParticipantBelongsToEventTx) Find() (result *entity.Event, err error) {
	return result, a.tx.Find(&result)
}

func (a eventParticipantBelongsToEventTx) Append(values ...*entity.Event) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a eventParticipantBelongsToEventTx) Replace(values ...*entity.Event) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a eventParticipantBelongsToEventTx) Delete(values ...*entity.Event) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a eventParticipantBelongsToEventTx) Clear() error {
	return a.tx.Clear()
}

func (a eventParticipantBelongsToEventTx) Count() int64 {
	return a.tx.Count()
}

func (a eventParticipantBelongsToEventTx) Unscoped() *eventParticipantBelongsToEventTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type eventParticipantBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a eventParticipantBelongsToUser) Where(conds ...field.Expr) *eventParticipantBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a eventParticipantBelongsToUser) WithContext(ctx context.Context) *eventParticipantBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a eventParticipantBelongsToUser) Session(session *gorm.Session) *eventParticipantBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a eventParticipantBelongsToUser) Model(m *entity.EventParticipant) *eventParticipantBelongsToUserTx {
	return &eventParticipantBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a eventParticipantBelongsToUser) Unscoped() *eventParticipantBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type eventParticipantBelongsToUserTx struct{ tx *gorm.Association }

func (a eventParticipantBelongsToUserTx) Find() (result *entity.User, err error) {
	return result, a.tx.Find(&result)
}

func (a eventParticipantBelongsToUserTx) Append(values ...*entity.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a eventParticipantBelongsToUserTx) Replace(values ...*entity.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a eventParticipantBelongsToUserTx) Delete(values ...*entity.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a eventParticipantBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a eventParticipantBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a eventParticipantBelongsToUserTx) Unscoped() *eventParticipantBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type eventParticipantDo struct{ gen.DO }

type IEventParticipantDo interface {
	gen.SubQuery
	Debug() IEventParticipantDo
	WithContext(ctx context.Context) IEventParticipantDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEventParticipantDo
	WriteDB() IEventParticipantDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEventParticipantDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEventParticipantDo
	Not(conds ...gen.Condition) IEventParticipantDo
	Or(conds ...gen.Condition) IEventParticipantDo
	Select(conds ...field.Expr) IEventParticipantDo
	Where(conds ...gen.Condition) IEventParticipantDo
	Order(conds ...field.Expr) IEventParticipantDo
	Distinct(cols ...field.Expr) IEventParticipantDo
	Omit(cols ...field.Expr) IEventParticipantDo
	Join(table schema.Tabler, on ...field.Expr) IEventParticipantDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEventParticipantDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEventParticipantDo
	Group(cols ...field.Expr) IEventParticipantDo
	Having(conds ...gen.Condition) IEventParticipantDo
	Limit(limit int) IEventParticipantDo
	Offset(offset int) IEventParticipantDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEventParticipantDo
	Unscoped() IEventParticipantDo
	Create(values ...*entity.EventParticipant) error
	CreateInBatches(values []*entity.EventParticipant, batchSize int) error
	Save(values ...*entity.EventParticipant) error
	First() (*entity.EventParticipant, error)
	Take() (*entity.EventParticipant, error)
	Last() (*entity.EventParticipant, error)
	Find() ([]*entity.EventParticipant, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.EventParticipant, err error)
	FindInBatches(result *[]*entity.EventParticipant, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.EventParticipant) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEventParticipantDo
	Assign(attrs ...field.AssignExpr) IEventParticipantDo
	Joins(fields ...field.RelationField) IEventParticipantDo
	Preload(fields ...field.RelationField) IEventParticipantDo
	FirstOrInit() (*entity.EventParticipant, error)
	FirstOrCreate() (*entity.EventParticipant, error)
	FindByPage(offset int, limit int) (result []*entity.EventParticipant, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEventParticipantDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []entity.EventParticipant, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (e eventParticipantDo) FilterWithNameAndRole(name string, role string) (result []entity.EventParticipant, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM event_participants WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e eventParticipantDo) Debug() IEventParticipantDo {
	return e.withDO(e.DO.Debug())
}

func (e eventParticipantDo) WithContext(ctx context.Context) IEventParticipantDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eventParticipantDo) ReadDB() IEventParticipantDo {
	return e.Clauses(dbresolver.Read)
}

func (e eventParticipantDo) WriteDB() IEventParticipantDo {
	return e.Clauses(dbresolver.Write)
}

func (e eventParticipantDo) Session(config *gorm.Session) IEventParticipantDo {
	return e.withDO(e.DO.Session(config))
}

func (e eventParticipantDo) Clauses(conds ...clause.Expression) IEventParticipantDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eventParticipantDo) Returning(value interface{}, columns ...string) IEventParticipantDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eventParticipantDo) Not(conds ...gen.Condition) IEventParticipantDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eventParticipantDo) Or(conds ...gen.Condition) IEventParticipantDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eventParticipantDo) Select(conds ...field.Expr) IEventParticipantDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eventParticipantDo) Where(conds ...gen.Condition) IEventParticipantDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eventParticipantDo) Order(conds ...field.Expr) IEventParticipantDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eventParticipantDo) Distinct(cols ...field.Expr) IEventParticipantDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eventParticipantDo) Omit(cols ...field.Expr) IEventParticipantDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eventParticipantDo) Join(table schema.Tabler, on ...field.Expr) IEventParticipantDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eventParticipantDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEventParticipantDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eventParticipantDo) RightJoin(table schema.Tabler, on ...field.Expr) IEventParticipantDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eventParticipantDo) Group(cols ...field.Expr) IEventParticipantDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eventParticipantDo) Having(conds ...gen.Condition) IEventParticipantDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eventParticipantDo) Limit(limit int) IEventParticipantDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eventParticipantDo) Offset(offset int) IEventParticipantDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eventParticipantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEventParticipantDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eventParticipantDo) Unscoped() IEventParticipantDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eventParticipantDo) Create(values ...*entity.EventParticipant) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eventParticipantDo) CreateInBatches(values []*entity.EventParticipant, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eventParticipantDo) Save(values ...*entity.EventParticipant) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eventParticipantDo) First() (*entity.EventParticipant, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.EventParticipant), nil
	}
}

func (e eventParticipantDo) Take() (*entity.EventParticipant, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.EventParticipant), nil
	}
}

func (e eventParticipantDo) Last() (*entity.EventParticipant, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.EventParticipant), nil
	}
}

func (e eventParticipantDo) Find() ([]*entity.EventParticipant, error) {
	result, err := e.DO.Find()
	return result.([]*entity.EventParticipant), err
}

func (e eventParticipantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.EventParticipant, err error) {
	buf := make([]*entity.EventParticipant, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eventParticipantDo) FindInBatches(result *[]*entity.EventParticipant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eventParticipantDo) Attrs(attrs ...field.AssignExpr) IEventParticipantDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eventParticipantDo) Assign(attrs ...field.AssignExpr) IEventParticipantDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eventParticipantDo) Joins(fields ...field.RelationField) IEventParticipantDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eventParticipantDo) Preload(fields ...field.RelationField) IEventParticipantDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eventParticipantDo) FirstOrInit() (*entity.EventParticipant, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.EventParticipant), nil
	}
}

func (e eventParticipantDo) FirstOrCreate() (*entity.EventParticipant, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.EventParticipant), nil
	}
}

func (e eventParticipantDo) FindByPage(offset int, limit int) (result []*entity.EventParticipant, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eventParticipantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eventParticipantDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eventParticipantDo) Delete(models ...*entity.EventParticipant) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eventParticipantDo) withDO(do gen.Dao) *eventParticipantDo {
	e.DO = *do.(*gen.DO)
	return e
}
